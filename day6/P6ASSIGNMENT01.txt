1. Write a program that takes a command-line argument n and prints a table of the powers of 2 that are less than or equal to 2^n.
Ans  :  $ nano PowerofTwo.sh
	#!/bin/bash -x
	read -p "enter the value" n
	result=1
	while(( n!=0))
	do
        		result=$((result*2))
        		echo $result
        		((n--))
	done

	

------------------------- * ------------------------------- * ---------------------------- * -------------------------- 
2. Write a program that takes a command-line argument n and prints the nth harmonic number. Harmonic Number is of the form Hn=1/1 + 1/2 + 1/3 + 1/4 +......+ 1/n 
Ans :	$ nano HarmonicNumber.sh
	#!/bin/bash -x
	read -p "enter which hormonic number u want to print" h

	function hormonic()
	{
        		n=$1
        		echo "$nth hormonic number is : "
        		awk "BEGIN { print 1/$n }"
	}

	hormonic $h
	
------------------------- * ------------------------------- * ---------------------------- * --------------------------
 
3. Write a program that takes a input and determines if the number is a prime.
Ans :   $ nano  Primenumber.sh
	#!/bin/bash -x
	read n
	function prime
	{
	for((i=2; i<=n/2; i++))
	do
        		if [ $((n%i)) -eq 0 ]
        		then
        		echo "$n is not prime number."
        		exit
        		fi
	done 
	echo "$n is a prime number"
	}
	r=`prime $n`
	echo "$r"

------------------------- * ------------------------------- * ---------------------------- * -------------------------- 

4. Extend the program to take a range of number as input and output the Prime Numbers in that range.
Ans :	$ nano PrimeNumberInRange.sh
	#!/bin/bash -x
	declare -a array
	read -p "enetr how many numbers " n
	for v in $(seq $n)
	do
        		read -p "enter v th number " number
        		array[$v]="$number"
	done
	echo  ${array[@]}

	for x in "${array[@]}"
	do
        		k=0
        		for((i=2; i<=x/2; i++))
        		do
               	 		if [ $((x%i)) -eq 0 ]
                			then
                        			k=1
                			fi
       	 	done
        		if [ $k -eq 0 ]
        		then
        		echo " $x is prime "
        		fi
	done

------------------------- * ------------------------------- * ---------------------------- * -------------------------- 

5. Write a program that computes a factorial of a number taken as input.
  5 Factorial â€“ 5! = 1 * 2 * 3 * 4 * 5
Ans :           $ nano Factorial.sh
	 #!/bin/bash -x
	read n
	for((i=n;i>=2;i--))
	do
	        m=$((i-1))
	        n=$((n *m))
	done

------------------------- * ------------------------------- * ---------------------------- * -------------------------- 

6. Write a program to compute Factors of a number N using prime factorization method.
Logic -> Traverse till i*i <= N instead of i <= N for efficiency.
O/P -> Print the prime factors of number N.
Ans :	$ nano PrimeFactor.sh
	#!/bin/bash -x
	read -p "enter number to find prime factors" num
	flag=0
	for((i=2; i<=num/2; i++))
	do

        		if [ $((num%i)) -eq 0 ]
        		then
                			flag=1
                			for((j=2; j<=i/2; j++))
                    			do
                       			if [ $((i%j)) -eq 0 ]
                        			then
                                				flag=0
                                			exit
                       			fi
                			done
        		fi

        	if [ $flag -eq 1 ]
        	then
                		echo "Prime factor of $num is $i : "
        	fi
	done


